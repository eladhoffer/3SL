# @package _global_

# specify here default training configuration
defaults:
  - _self_
  - trainer: default.yaml
  - task: resnet_cifar.yaml
  - data: cifar10.yaml
  - callbacks: default.yaml # set this to null if you don't want to use callbacks
  - logger: many_loggers.yaml # set logger here or use command line (e.g. `python run.py logger=wandb`)
  - experiment: null
  - hparams_search: null
  - hydra: default.yaml

  # enable color logging
  - override hydra/hydra_logging: colorlog
  - override hydra/job_logging: colorlog

# experiment name identifier
name: ${now:%Y-%m-%d}/${now:%H-%M-%S}
# sub-experiment name identifier (multirun)
subname: ${hydra.job.num}

# path to original working directory
# hydra hijacks working directory by changing it to the current log directory,
# so it's useful to have this path as a special variable
# learn more here: https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ${hydra:runtime.cwd}

# path to folder with data
data_dir: /home/${oc.env:USER}/Datasets

# use `python run.py debug=true` for easy debugging!
# this will run 1 train, val and test loop with only 1 batch
# equivalent to running `python run.py trainer.fast_dev_run=true`
# (this is placed here just for easier access from command line)
debug: False

# pretty print config at the start of the run using Rich library
print_config: True

# disable python warnings if they annoy you
ignore_warnings: True

# global aliases for easy configuration
batch_size: 64
eval_batch_size: ${batch_size}
num_workers: 8
eval_num_workers: ${num_workers}
imagenet_size: 1281167
cifar_size: 50000
resume: null
