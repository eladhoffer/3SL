# @package _global_

# to execute this experiment run:
# python run.py experiment=fixmatch_cifar10
defaults:
  - override /trainer: default.yaml # choose trainer from 'configs/trainer/'
  - override /data: cc12m_small.yaml
  - override /callbacks: default.yaml
  - override /logger: many_loggers.yaml
  - override /task: default.yaml
# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

seed: 12345
resume: null

trainer:
  min_epochs: 1
  max_steps: 19531
  max_epochs: ${trainer.max_steps}
  benchmark: true
  val_check_interval: 4000

data:
  train:
    loader:
      batch_size: 256
      num_workers: 16
  val:
    loader:
      batch_size: 256
      num_workers: 16
task:
  _target_: src.tasks.supervised.SupervisedEmbeddingTask
  model:
    _target_: src.models.resnet.ResNet_cifar
    num_classes: 768
    width: [160, 320, 640]
    depth: 28
  optimizer:
    _target_: src.optim.OptimConfig.instantiate
    optimizer:
      _target_: torch.optim.AdamW
      betas:
        - 0.9
        - 0.98
      eps: 1e-6
      weight_decay: 0.01
      lr: 1e-3
    optimizer_filters:
      - filter:
          _target_: src.optim.filter.OnlyBN
          exclude: true
      - filter:
          _target_: src.optim.filter.OnlyBN
        weight_decay: 0.0     
    lr_scheduler:
      _target_: torch.optim.lr_scheduler.CosineAnnealingLR
      T_max: ${trainer.max_steps}
      eta_min: 0
    interval: step      
  criterion:
    _target_: lightly.loss.hypersphere_loss.HypersphereLoss
callbacks:
  model_checkpoint:
    monitor: "loss/val"     