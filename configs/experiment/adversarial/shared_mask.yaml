# @package _global_

# to execute this experiment run:
# python run.py experiment=resnet50_imagenet.yaml

defaults:
  - override /trainer: ddp.yaml # choose trainer from 'configs/trainer/'
  - override /task: adversarial_transform.yaml
  - override /data: imagenet.yaml
  - override /callbacks: default.yaml
  - override /logger: many_loggers.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

trainer:
  max_steps: 30000
  max_epochs: ${trainer.max_steps}
  gpus: 4
  benchmark: false

data:
  train:
    loader:
      batch_size: 32
      num_workers: 0
      pin_memory: false
  val:
    loader:
      batch_size: 32
      num_workers: 0
      pin_memory: false

task:
  _target_: src.tasks.adversarial.AdversarialTransformTask
  model:
    _target_: src.models.adversarial.AdversarialSharedMask
    output_size: [3, 224, 224]
  agnostic_model:
    _target_: torchvision.models.resnet50
    pretrained: True
  attacked_model:
    _target_: torchvision.models.resnet18
    pretrained: True
  optimizer:
    _target_: src.optim.OptimConfig.instantiate
    optimizer:
      _target_: torch.optim.Adam
      lr: 1e-3
    lr_scheduler:
      _target_: torch.optim.lr_scheduler.CosineAnnealingLR
      T_max: ${trainer.max_steps}
    interval: step
  criterion: kl
  mu: 1e-3
  mu_max: 32.0
  transform_mode: interpolate


callbacks:
  model_checkpoint:
    monitor: "val-loss/loss"
